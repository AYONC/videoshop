@startuml

!include "../theme.puml"

actor customer as "Customer"
participant videoRentController as "VideoRentController" <<controller>>
participant videoRentService as "VideoRentService" <<service>>
participant videoRentRepository as "VideoRentRepository" <<repository>>
entity account as "Account" <<entity>>
participant videoService as "VideoService" <<service>>
participant videoRepository as "VideoRepository" <<repository>>
entity video as "Video" <<entity>>

... after authenticated ...

customer -> videoRentController: RentVideoRequest\n(videoId, rentDays, \nisIgnoreRentBefore)
activate videoRentController

videoRentController -> videoRentController: validate RentVideoRequest
videoRentController -> videoRentController: get logged account entity

videoRentController -> videoRentService: rent(RentVideoRequest, account)
activate videoRentService

group check is customer
    videoRentService -> account: assertIsCustomer()
    activate account

    alt if account is not customer
        account -> account: throw
        note left #ffaaaa: CustomerAssertionFailedException
    end

    videoRentService <- account:
    deactivate account
end

group get video entity
    videoRentService -> videoService: getOne(videoId)
    activate videoService
    videoService -> videoRepository: getOne(videoId)
    activate videoRepository

    videoService <- videoRepository: return video entity
    deactivate videoRepository
    videoRentService <- videoService: return video entity
    deactivate videoService
end

group check is video has rented before
    alt if not req.isIgnoreRentBefore
        videoRentService -> videoRentService: findByVideoAndAccount(video, account)
        activate videoRentService

        videoRentService -> videoRentRepository: findByVideoIdAndAccountId(videoId, accountId)
        activate videoRentRepository

        videoRentService <- videoRentRepository:
        deactivate videoRentRepository

        videoRentService <- videoRentService:
        deactivate videoRentService

        alt if video has rented before:
            videoRentService -> videoRentService: throw
            note left #ffaaaa: VideoHasRentedBeforeException
        end
    end
end

group check is video rentable
    videoRentService -> videoRentService: assertIsVideoRentable\n(account, video)
    activate videoRentService

    videoRentService -> video: assertIsOpened()
    activate video

    alt if video is not opened
        video -> video: throw
        note left #ffaaaa: VideoNotOpenedException
    end

    videoRentService <- video:
    deactivate video

    videoRentService <- videoRentService
    deactivate videoRentService
end

@enduml
